@page "/thesis/{id:int?}"
@using Entities
@using Core
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@attribute [Authorize]

@if (Thesis != null) {
<div class="row justify-content-center">
    <div class="col-sm-10">
        <div class="col-sm-12 mb-4">
            <a href="/" class="btn btn-login" style="margin-left: 0">Back</a>
        </div>
        <h1>@Thesis.Name</h1>
        <div class="top-box mt-5">
            <div class="row">
                <div class="col d-flex flex-column justify-content-space">
                    <h2 class="h3">Professor @Thesis.Teacher.Name</h2>
                </div>
                <div class="col d-flex justify-content-end">
                    @if (!appliedFor)
                    {
                        <div>
                            <button class="btn btn-lg bg-yellow" @onclick="Apply">Apply</button>
                        </div>
                    }
                    else
                    {
                        <div>
                            <button class="btn btn-lg bg-red" @onclick="Delete">Cancel</button>

                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="content content-grey mt-5">
            @((MarkupString)Thesis.Description)
        </div>
    </div>
</div>
} else if (Thesis == null && returned) {
    <div>
        <h1>Nothing found</h1>
    </div>
} else {
    <div>
        <h1>Loading...</h1>
    </div>
}
 
@code {

    @*
        * TODO: 1) Check current student has Isapplied for this thesis
        * TODO: 2) Make the student capable of applying, cancelling or accepting the status of the thesis for the student
    *@

    @* private Status status = null; *@

    private bool returned;

    private ThesisDTO? Thesis;

    [Parameter]
    public int? Id { get; set; } = 0;

    private bool appliedFor = false;   




    private async Task Apply()
    {
        appliedFor = !appliedFor;
        var username = await localStorage.GetItemAsync<string>("user");
        
        var usernameInt = Int32.Parse(username);
        
        var studentDTO = new StudentDTO(usernameInt, "Viggo", "vibr@itu.dk");
        var createDTO = new ApplyDTO(Status.Pending, studentDTO, Thesis);

        var apply = await Http.PostAsJsonAsync("/api/apply", createDTO);
        Console.WriteLine("APPLYIED::: " + apply.StatusCode + "THESIS ID ::: " + Thesis.Id);
    }

    private async Task Delete()
    {
        appliedFor = !appliedFor;
        var username = await localStorage.GetItemAsync<string>("user");
        
        var usernameInt = Int32.Parse(username);
        
        var applyDTO= await Http.GetFromJsonAsync<ApplyDTOid?>($"api/Thesis/{usernameInt}/{Thesis.Id}");

        await Http.DeleteAsync($"api/Apply/{applyDTO.Id}");
    }


    protected override async Task OnInitializedAsync()
    {

        var username = await localStorage.GetItemAsync<string>("user");
        var usernameInt = Int32.Parse(username);

        returned = false;

        Thesis = await Http.GetFromJsonAsync<ThesisDTO>("api/Thesis/" + Id);

        returned = true;


    }
}
