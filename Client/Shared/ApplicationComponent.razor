@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager;


    <div class="card mb-4 mt-3 border-0 @(true ? "yellow" : "bg-grey")">
        <div class="row">
            <div class="col-sm-8">
                <h2 class="headline">@title</h2>
                <h3>Professor @teacher</h3>
                <h4 class="text-muted h6">@keywords</h4>
                <div class="excerpt">
                    @((MarkupString)excerpt)
                </div>
            </div>
                @if (accepted == Status.Accepted) {
                    <div class="col d-flex flex-row justify-content-center">
                        <div class="accepted-btns d-flex flex-column justify-content-around" style="width: 80%">
                            
                           <NavLink href="/applications" @onclick="reload">
                                <button class="btn btn-accept"@onclick="Accept">Accept</button>
                            </NavLink> 
                            <NavLink href="/applications" @onclick="reload">
                                <button class="btn btn-cancel"@onclick="Delete">Decline</button>
                            </NavLink> 

                        </div>
                    </div>
                } else {
                    <div class="col d-flex justify-content-center align-items-center">
                        <div class="not-accepted-btn" style="width: 80%">
                            <NavLink href="/applications" @onclick="reload">
                            <button class="btn btn-cancel" @onclick="Delete"> Cancel</button>
                            </NavLink>
                        </div>
                    </div>
                }
        </div>
    </div>

@code {

    private ApplyDTOids applyDTOid = null;

    [Parameter]
    public int studentID { get; set;} = 0;

    [Parameter]
    public int thesisId { get; set; } = 0;
    
    [Parameter]
    public string title { get; set; } = "";

    [Parameter]
    public string teacher { get; set; } = "";

    [Parameter]
    public string keywords { get; set; } = "";

    [Parameter]
    public string student { get; set;} = "";

    [Parameter]
    public string excerpt { get; set; } = "";    

    [Parameter]
    public Status accepted { get; set; } = 0;

    [Parameter]
    public int applyId { get; set; } = 0;

    [Parameter]
    public Status status { get; set;} = 0;

    private async Task Accept(){
        applyDTOid = new ApplyDTOids(applyId, status, studentID, thesisId);
        await Http.PutAsJsonAsync($"api/Student/"+ applyId, applyDTOid);
        await Http.DeleteAsync($"api/Student/" + studentID);
    }

    private async Task Delete(){
        await Http.DeleteAsync($"api/Apply/{applyId}");
    }

    private void reload(){
        NavigationManager.NavigateTo("applications", true);
    }

}